<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Learning - Tag - cat /usr/share</title><link>https://philmish.github.io/tags/learning/</link><description>Learning - Tag - cat /usr/share</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://philmish.github.io/tags/learning/" rel="self" type="application/rss+xml"/><item><title>Practical Malware Analysis Chapter 1 Lab 4</title><link>https://philmish.github.io/2023/11/chapter-one-lab-04/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/chapter-one-lab-04/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/cover_prac_mal_ana.png" referrerpolicy="no-referrer">
&lt;/div>After falling down the rabbit hole of unpacking the previous sample, this one will be a bit shorter again.
Questions Are there any existing signatures for the sample on virus total ? Are there indications that the file was obfuscated or packed ? If the file is packed, unpack it if possible. When was the program compiled ? Do any imports hint at the programs functionality ? If some which imports are they and what do they tell you ?</description></item><item><title>Practical Malware Analysis Chapter 1 Lab 3</title><link>https://philmish.github.io/2023/11/chapter-one-lab-03/</link><pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/chapter-one-lab-03/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/cover_prac_mal_ana.png" referrerpolicy="no-referrer">
&lt;/div>This lab turned out to be a bit more complicated than the two before. I spend a considerable amount of time figuring out how to unpack the provided sample, partly due to problems with setting up the tooling I wanted to use correctly (python3.10 backwards compatability can be a bitch).
In addition to PE Bear and Detect it easy I used PEiD to identify the packer and a tool I found called unipacker.</description></item><item><title>Practical Malware Analysis Chapter 1 Lab 1</title><link>https://philmish.github.io/2023/11/chapter-one-lab-01/</link><pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/chapter-one-lab-01/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/cover_prac_mal_ana.png" referrerpolicy="no-referrer">
&lt;/div>After being interested in the topic of Malware Reversing/Research for a while now and picking Practical Malware Analysis last month. I started working through it this week and, as of now, really enjoying it. The first chapter concentrates on the basics of static analysis of binaries. As the author states himself, a lot of the specifics in the book are now out of date. For example, the Labs are originaly designed for Windows XP.</description></item><item><title>Practical Malware Analysis Chapter 1 Lab 2</title><link>https://philmish.github.io/2023/11/chapter-one-lab-02/</link><pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/chapter-one-lab-02/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/cover_prac_mal_ana.png" referrerpolicy="no-referrer">
            </div>As the first writeup got a little bit long, this one will be a little bit shorter. The second lab mainly deals with packing.
Questions Does the sample match any existing signatures on VT ? Are there indicators that the sample is packed or obfuscated ? If it is packed unpack it if possible. Do any imports hint at the program&rsquo;s functionality ? Which Imports are there and what do they tell you ?]]></description></item></channel></rss>