<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - cat /usr/share</title><link>https://philmish.github.io/posts/</link><description>All Posts | cat /usr/share</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://philmish.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Bash Scripting Reference</title><link>https://philmish.github.io/2023/11/bash_scripting/</link><pubDate>Thu, 23 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/bash_scripting/</guid><description><![CDATA[This post is a small summary of the basics of bash scripting. It contains some useful code snippets as well.
arsing Arguments to a script with getopts
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ARGS=$@ if [[ ${#ARGS} -ne 0 ]]; then while getopts &#34;:sT:h&#34; ARG; do case &#34;$ARG&#34; in s) echo &#34;-s flag set&#34; ;; T) echo &#34;-T flag set&#34; echo &#34;The value was $OPTARG&#34; ;; h) help ;; :) echo &#34;Argument missing for $ARG&#34; ;; *) echo &#34;Invalid flag $ARG.]]></description></item><item><title>Linux Shell Foo</title><link>https://philmish.github.io/2023/11/linux-shell-foo/</link><pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/linux-shell-foo/</guid><description>Find Get the most recently modified file from a directory:
1 find /path/to/target/dir -type f -exec ls -t1 {} + | head -1 Find the 10 largest files of a directory and its sub directories recursively:
1 find / -type f -printf &amp;#39;%s %p\n&amp;#39; | sort -nr | head -10 Find all files between 10Mb and 20Mb
1 find / -type f -size +10M -size -20M Find all files created after 00:00:00 31.</description></item><item><title>Intel x86 Assembly Overview</title><link>https://philmish.github.io/2023/11/intel86_assembly/</link><pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/intel86_assembly/</guid><description>This is an overview over the relevant basics of Intel&amp;rsquo;s x86 Assembly language.
Architecture follows Van Neuman architecture Hardware components: CPU, RAM, I/O bitness: little endian Figure 1. Simplified Hardware Layout Main Memory Layout Data: also called data section, put in place when the program is initially loaded, the values contained in data may not be changed (static) and are available to every part of the program (global) Code: includes the instructions fetched by the CPU to execute the program, controls how the program&amp;rsquo;s tasks are orchestrated Heap: is used for dynamic memory during execution, changes frequently while the program is running Stack: is used for local variables and function parameters, helps control flow Figure 2.</description></item><item><title>Practical Malware Analysis Chapter 1 Lab 3</title><link>https://philmish.github.io/2023/11/chapter-one-lab-03/</link><pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/chapter-one-lab-03/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/cover_prac_mal_ana.png" referrerpolicy="no-referrer">
&lt;/div>This lab turned out to be a bit more complicated than the two before. I spend a considerable amount of time figuring out how to unpack the provided sample, partly due to problems with setting up the tooling I wanted to use correctly (python3.10 backwards compatability can be a bitch).
In addition to PE Bear and Detect it easy I used PEiD to identify the packer and a tool I found called unipacker.</description></item><item><title>Practical Malware Analysis Chapter 1 Lab 1</title><link>https://philmish.github.io/2023/11/chapter-one-lab-01/</link><pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/chapter-one-lab-01/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/cover_prac_mal_ana.png" referrerpolicy="no-referrer">
&lt;/div>After being interested in the topic of Malware Reversing/Research for a while now and picking Practical Malware Analysis last month. I started working through it this week and, as of now, really enjoying it. The first chapter concentrates on the basics of static analysis of binaries. As the author states himself, a lot of the specifics in the book are now out of date. For example, the Labs are originaly designed for Windows XP.</description></item><item><title>Practical Malware Analysis Chapter 1 Lab 2</title><link>https://philmish.github.io/2023/11/chapter-one-lab-02/</link><pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/11/chapter-one-lab-02/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/cover_prac_mal_ana.png" referrerpolicy="no-referrer">
            </div>As the first writeup got a little bit long, this one will be a little bit shorter. The second lab mainly deals with packing.
Questions Does the sample match any existing signatures on VT ? Are there indicators that the sample is packed or obfuscated ? If it is packed unpack it if possible. Do any imports hint at the program&rsquo;s functionality ? Which Imports are there and what do they tell you ?]]></description></item><item><title>GDB Basics Cheatsheet</title><link>https://philmish.github.io/2023/05/gdb-basics/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><author>philmish</author><guid>https://philmish.github.io/2023/05/gdb-basics/</guid><description><![CDATA[Launching Launching against a binary 1 gdb ./path-to-binary Launch against a process ID 1 gdb -silent `pidof &lt;binary-name&gt;` Launch in TUI Mode 1 gdb -tui Commands Set breakpoint 1 2 (gdb) b main // Breaks at main() (gdb) break strcpy // Breaks at strcpy() List defined breakpoints 1 (gdb) info b Continue execution 1 (gdb) c Step into 1 (gdb) s Show stored values 1 2 3 4 5 6 (gdb) print $esp (gdb) x/5x $esp-10 // in Hex (gdb) x/5s $esp-10 //String (gdb) x/5d $esp-10 //Decimal (gdb) x/5i $esp-10 //Assembly Instructions Show where in the source file we are 1 (gdb) list Show where execution is 1 (gdb) where Show symbols 1 (gdb) info file Show all defined functions 1 (gdb) info functions Show function disassembly 1 (gdb) disas &lt;func-name&gt; Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 (gdb) disas strcpy Dump of assembler code for function strcpy: 0x42079dd0 &lt;strcpy+0&gt;: push %ebp 0x42079dd1 &lt;strcpy+1&gt;: mov %esp,%ebp 0x42079dd3 &lt;strcpy+3&gt;: push %esi 0x42079dd4 &lt;strcpy+4&gt;: mov 0x8(%ebp),%esi 0x42079dd7 &lt;strcpy+7&gt;: mov 0xc(%ebp),%edx 0x42079dda &lt;strcpy+10&gt;: mov %esi,%eax 0x42079ddc &lt;strcpy+12&gt;: sub %edx,%eax 0x42079dde &lt;strcpy+14&gt;: lea 0xffffffff(%eax),%ecx 0x42079de1 &lt;strcpy+17&gt;: jmp 0x42079df0 &lt;strcpy+32&gt; 0x42079de3 &lt;strcpy+19&gt;: nop 0x42079de4 &lt;strcpy+20&gt;: nop 0x42079dfb &lt;strcpy+43&gt;: mov %esi,%eax 0x42079dfd &lt;strcpy+45&gt;: pop %esi 0x42079dfe &lt;strcpy+46&gt;: pop %ebp 0x42079dff &lt;strcpy+47&gt;: ret End of assembler dump.]]></description></item></channel></rss>